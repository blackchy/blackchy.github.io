<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[我的Flutter入门学习]]></title>
    <url>%2F2019%2F11%2F12%2F2019-11-12-Flutter-Start%2F</url>
    <content type="text"><![CDATA[刚开始因为工作中并没有用到Flutter，所以对Flutter不太感冒，加之之前React Native带给我的很多不好的开发体验，因此Flutter火了很久都还没有去接触它。但是，看到越来越多的人去用Flutter，还有最近一段时间又比较有空闲，就去开始学习Flutter，最后发现它挺好用的，比React Native要友好很多。打开Flutter中文网，开始学习Flutter。 开发环境(windows)前置要求 操作系统：Windows7及以上(64位) 磁盘空间:400MB 工具:git for windows IDE:AndroidStudio3.0及以上(下载安装Flutter和Dart插件) Flutter SDK由于墙的原因，Flutter官网下载sdk不方便，所以到github下载。项目路径：Flutter SDK Github Repository 下载最新发布的zip压缩包，解压到自定义文件夹中(如：E:/FlutterSdk/)。 然后打开cmd或powershell输入命令flutter doctor检查看看有什么错误，我这里报了一些错误：一些android licenses没有认证，没有安装AndroidStudio、没有Flutter插件、没有Dart插件、没有连接设备，Flutter和Dart插件在AndroidStudio中已经安装所以不用管，其他几个报错明显也不用管。 最后复制flutter\bin的全路径准备配置环境变量(如：E:\FlutterSdk\flutter-1.10.15\bin)。 配置环境变量添加用户变量： 新增变量 变量名：PUB_HOSTED_URL 值：https://pub.flutter-io.cn 新增变量 变量命：FLUTTER_STORAGE_BASE_URL 值：https://storage.flutter-io.cn 找到path变量，在后面添加Flutter SDK的变量，值：flutter\bin的全路径(如：E:\FlutterSdk\flutter-1.10.15\bin，记得前面加;隔开) 开发新建项目 选择File&gt;New Flutter Project。 选择Flutter application作为项目类型。 输入项目名称。 在lib/main.dart文件中开始写代码。 其他事项 模拟器安装后因为cpu类型可能导致安装后无法使用，需要在android模块修改gradle配置。 修改app图标、app名称等，其操作和android开发一样，在android模块AndroidManifest进行修改。 添加依赖包是在根目录pubspec.yaml中添加，然后点击文件上方Packages get进行下载构建。 使用项目文件夹里的图片需要在pubspec.yaml资源assets处加上该文件名称路径，跟android注册activity类似。 修改了dart文件过后点击run图标旁边的闪电图标(或ctrl+s保存)即可进行热重载，直接刷新连接设备的界面。…… 其他就是Flutter UI、组件、框架等的熟悉使用。]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next 修改超链接颜色]]></title>
    <url>%2F2019%2F09%2F30%2F2019-09-30-Hexo-Next-Link-Color%2F</url>
    <content type="text"><![CDATA[Hexo Next自带的超链接颜色为灰色加下划线，看起来不是特别明显，所以将其修改为蓝色。 1.在./themes/next/source/css/_custom/custom.styl里添加如下代码。 12345678910if hexo-config(&quot;custom_css.post_body_a.enable&quot;) .post-body a:not(.btn)&#123; color: convert(hexo-config(&quot;custom_css.post_body_a.normal_color&quot;)); border-bottom: none; &amp;:hover &#123; color: convert(hexo-config(&quot;custom_css.post_body_a.hover_color&quot;)); text-decoration: underline; &#125; &#125; a:not(.btn)避免修改首页的”阅读全文”按钮 2.在./themes/next/_config.yml里添加如下代码。 12345custom_css: post_body_a: enable: true normal_color: &quot;#3296FA&quot; hover_color: &quot;#0593d3&quot;]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows相关]]></title>
    <url>%2F2019%2F09%2F29%2F2019-09-29-Windows-About%2F</url>
    <content type="text"><![CDATA[个人Windows使用习惯，包含使用的软件、壁纸、头像等。 Windows软件新电脑或者重装系统电脑需要安装的软件 火绒安全安全软件，除基本的病毒查杀外还包含右键管理、弹窗拦截、漏洞修复、火绒剑等拓展工具，特别是弹窗拦截，可拦截输入法、qq、wps带的弹窗广告，使得电脑使用过程中无弹窗打扰极其舒适。 官网地址 PotPlayer视频播放器，纯净无广告无弹窗无vip。 官网地址(可能需要翻墙)自备下载地址(版本：1.7.17508，更新时间 : 2019/02/12) LICEcap录制gif,无水印无广告无vip。 下载地址(可能需要翻墙)自备下载地址 OBS Studio开源软件，可自定义窗口组合、录像、录屏、水印等，可设置推流进行直播。 官网地址github地址 Chrome浏览器插件：1.CLEAN crxMouse Gestures（鼠标手势） 2.AdBlock、AdGuard 广告拦截器（广告拦截）。默认安装地址是C盘，安装过后直接移动安装文件夹到其他盘即可。 下载地址(中国地区) Sublime Text文本编辑器。 官网地址Sublime Text3 下载地址 QQ拼音输入法相对于其他中文输入法，广告算是最少的了。 官网地址 MarkdownPad2markdown编辑器，win10需要安装sdk才能实时预览。 官网地址Awesomium 1.6.6 SDK 下载地址 Bandizip压缩软件，无广告。 官网地址 图片win10默认壁纸分辨率 : 1920x1080文件大小 : 354KB文件格式 ： jpg下载地址 头像]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub发布Library，compile使用]]></title>
    <url>%2F2018%2F12%2F19%2F2018-12-19-Public-Library%2F</url>
    <content type="text"><![CDATA[把自己习惯使用的工具类放到一个公共库中并在Github上发布，然后在AndroidStudio的项目中依赖使用，这是一件很方便的事。 项目相关 本地创建好项目之后，删掉多余无用的东西，然后新建一个Module(Android Library)，把代码写在这个module中，原来的app module就没什么用了。 在项目根目录的build.gradle中添加： 1classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.5&apos; 如图所示： 在新建的module目录的build.gradle中添加(group:自己的github号)： 12apply plugin: &apos;com.github.dcendents.android-maven&apos;group = &apos;com.github.blackchy&apos; 如图所示：并把android里面的无用配置和dependencies里面的无用依赖全部删掉。 Github相关 在Github新建一个远程仓库，然后把本地仓库上传同步到远程仓库中。 去github上发布这个公共库的代码。 发布依赖这里通过JitPack发布依赖。 打开JitPack的首页，并登录(github账号登录)。 把代码发布好的github仓库地址复制到输入框并点击Look up按钮。等Log的圈圈转完以后，表示发布完成其他项目已经可以依赖使用这个公共库了，点击Get it按钮跳转到具体依赖方法。 完]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AndroidTV入门]]></title>
    <url>%2F2018%2F12%2F18%2F2018-12-18-AndroidTV%2F</url>
    <content type="text"><![CDATA[机顶盒现在基本都是通过安装的APK进行操作的，这些APK又分为EPG(Android嵌套Web，主要为Web端开发)和AndroidTV原生(主要为Android开发)，本文介绍AndroidTV开发入门流程。AndroidTV和手机App开发的主要区别就是它的布局是按照横屏显示器布局的，而且它是焦点控制（手机App主要是屏幕点击控制），在音视频方面比手机App需要注意更多的细节，以及其他一些小问题。还有比较重要的一点，AndroidTV需要考虑更多硬件的问题以及适配更老的Android版本，甚至是4.4以前的版本都有可能需要考虑。 准备大多数机顶盒的版本都比较低，所以AndroidStudio不推荐使用3.0（推荐2.3.3）及以上的版本进行开发，还有jdk版本也是一样（1.8足够了），所以记得复制别人代码的时候把lambda表达式改成常规的表达式，等等等等。 适配 文字间距等布局时统一使用pt作为单位，例如： 12345678910&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;30pt&quot; android:gravity=&quot;center&quot; android:paddingLeft=&quot;10pt&quot; android:paddingRight=&quot;10pt&quot; android:text=&quot;Text&quot; android:textColor=&quot;@color/colorWhite&quot; android:textSize=&quot;20pt&quot; /&gt; 屏幕适配则使用JessYan的Android适配方案，首先添加依赖： 1compile &apos;me.jessyan:autosize:1.0.6&apos; 然后在自定义Applicatio的create方法中添加适配： 1AutoSizeConfig.getInstance().getUnitsManager().setSupportDP(false).setSupportSubunits(Subunits.PT); 最后，代码中需要转换的地方则用AutoSizeUtils里面的方法： 12rvtItem.setSpacingWithMargins(AutoSizeUtils.pt2px(context, 20), AutoSizeUtils.pt2px(context, 20)); 当然，肯定还有其他更好的适配方式。 列表AndroidTV开发中经常用到列表这种布局，这里有两种方法。 Google提供的androidtv-Leanback。布局文件： 123456789&lt;com.example.core.leanback.HorizontalGridView android:id=&quot;@+id/hgv_item&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;100pt&quot; android:clipChildren=&quot;false&quot; android:clipToPadding=&quot;false&quot; android:padding=&quot;20pt&quot; /&gt; 其中android:clipChildren=&quot;false&quot;和android:clipToPadding=&quot;false&quot;是为了做选中放大子视图时避免子视图不完整。 代码： 123456789101112131415161718192021222324252627//@BindView(R.id.hgv_item) HorizontalGridView hgvItem;//private ListItemAdapter listItemAdapter;listItemAdapter = new ListItemAdapter();hgvItem.setAdapter(listItemAdapter);hgvItem.setHorizontalSpacing(AutoSizeUtils.pt2px(context, 20));hgvItem.setOnItemListener(new OnItemListener() &#123; @Override public void onItemSelected(Object parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.05f) .scaleY(1.05f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundResource(R.drawable.bg_item); &#125; @Override public void onItemPreSelected(Object parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.0f) .scaleY(1.0f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundColor(getResources().getColor(android.R.color.transparent)); &#125;&#125;);listItemAdapter.setNewData(mockData.listItems); 其中，setHorizontalSpacing方法为设置子视图之间的水平间距，setOnItemListener为子视图获得焦点和失去焦点的监听，setOnItemListener监听中添加了获得焦点的子视图放大1.05倍的动画和改变子视图背景使获得焦点的子视图视觉上更明显的效果。具体效果如下图： Adapter类: 123456789public class ListItemAdapter extends BaseQuickAdapter&lt;String, BaseViewHolder&gt; &#123; public ListItemAdapter() &#123; super(R.layout.item_list); &#125; @Override protected void convert(BaseViewHolder helper, String item) &#123; helper.setText(R.id.tv_text, item); &#125;&#125; 子视图布局文件： 12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:focusable=&quot;true&quot; android:focusableInTouchMode=&quot;true&quot; android:padding=&quot;2pt&quot; &gt; &lt;FrameLayout android:id=&quot;@+id/fl_content&quot; android:layout_width=&quot;150pt&quot; android:layout_height=&quot;150pt&quot; android:background=&quot;@color/colorPrimary&quot; &gt; &lt;TextView android:id=&quot;@+id/tv_text&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;text&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;25pt&quot; /&gt; &lt;/FrameLayout&gt;&lt;/RelativeLayout&gt; 其中，android:focusable=&quot;true&quot;表示可获取控件的焦点（键盘、遥控器），android:focusableInTouchMode=&quot;true&quot;表示可通过触摸获取焦点（AndroidTV不需要，开发时使用模拟器会用到）。 注： leanback的垂直和水平列表是继承RecyclerView的自定义控件。 leanback默认选中项滑动到屏幕中间位置。 列表的Adapter继承BaseRecyclerViewAdapterHelper，方便操作与管理。 垂直列表基本相同，使用的是VerticalGridView类。 水平列表有一个拓展类HorizontalRowView，以方便处理嵌套。 Github上有很多开发者自己仿照leanback自定义的RecyclerViewTV，也是继承的Recyclerview，它们也基本都是水平列表、垂直列表用一个布局，通过属性修改。这里找了一个（具体出处忘记了）来用一下。布局文件： 12345678910&lt;com.example.core.view.RecyclerViewTV android:id=&quot;@+id/rvt_item&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;100pt&quot; android:orientation=&quot;horizontal&quot; android:padding=&quot;20pt&quot; app:layoutManagerTV=&quot;V7LinearLayoutManage app:selectedItemIsCenteredTV=&quot;true&quot; /&gt; 其中，layoutManagerTV定义布局方式（V7GridLayoutManager、V7LinearLayoutManager、V7StaggeredGridLayoutManager），selectedItemIsCenteredTV设置选中项滑动到屏幕中间，orientation设置水平和垂直（vertical、horizontal）。clipChildren和clipToPadding根据需要添加。 代码： 123456789101112131415161718192021222324252627//@BindView(R.id.rvt_item) RecyclerViewTV rvtItem;//private ListItemAdapter listItemAdapter;listItemAdapter = new ListItemAdapter();rvtItem.setAdapter(listItemAdapter);rvtItem.setSpacingWithMargins(AutoSizeUtils.pt2px(context, 0), AutoSizeUtils.pt2px(context, 20));rvtItem.setOnItemListener(new RecyclerViewTV.OnItemListener() &#123; @Override public void onItemSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.05f) .scaleY(1.05f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundResource(R.drawable.bg_item); &#125; @Override public void onItemPreSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.0f) .scaleY(1.0f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundColor(getResources().getColor(android.R.color.transparent)); &#125;&#125;);listItemAdapter.setNewData(mockData.listItems); 和leanback实现差不多的功能，adapter也是用的同一个adapter，其中设置间距的方法为setSpacingWithMargins(verticalSpacing,horizontalSpacing)，展示效果和上面leanback的一样。 RecyclerViewTV的网格布局可以避免部分嵌套。布局文件： 12345678&lt;com.example.core.view.RecyclerViewTV android:id=&quot;@+id/rvt_item&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:padding=&quot;20pt&quot; app:layoutManagerTV=&quot;V7GridLayoutManager&quot; app:selectedItemIsCenteredTV=&quot;true&quot; /&gt; 将layoutManagerTV设置为上面提到的V7GridLayoutManager即可。效果： 列表嵌套 leanback嵌套，这里采用先使用垂直列表，再嵌套水平列表。垂直列表布局： 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@android:color/black&quot; &gt; &lt;com.example.core.leanback.VerticalGridView android:id=&quot;@+id/vgv_item&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:clipChildren=&quot;false&quot; android:clipToPadding=&quot;false&quot; android:padding=&quot;20pt&quot; /&gt;&lt;/RelativeLayout&gt; 水平列表布局： 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:clipChildren=&quot;false&quot; android:clipToPadding=&quot;false&quot; &gt; &lt;com.example.core.leanback.HorizontalRowView android:id=&quot;@+id/hrv_item&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:clipChildren=&quot;false&quot; android:clipToPadding=&quot;false&quot; /&gt;&lt;/FrameLayout&gt; 代码： 123456//@BindView(R.id.vgv_item) VerticalGridView vgvItem;//private ItemAdapter itemAdapter;itemAdapter = new ItemAdapter();vgvItem.setAdapter(itemAdapter);vgvItem.setVerticalSpacing(AutoSizeUtils.pt2px(context, 20));itemAdapter.setNewData(mockData.gnLists); 垂直列表adapter： 1234567891011121314151617181920212223242526272829303132public class ItemAdapter extends BaseQuickAdapter&lt;GNList, BaseViewHolder&gt; &#123; public ItemAdapter() &#123; super(R.layout.layout_gn); &#125; @Override protected void convert(BaseViewHolder helper, GNList item) &#123; HorizontalRowView horizontalRowView = helper.getView(R.id.hrv_item); ListItemAdapter listItemAdapter = new ListItemAdapter(); horizontalRowView.getGridView().setAdapter(listItemAdapter); horizontalRowView.getGridView().setHorizontalSpacing(AutoSizeUtils.pt2px(context, 20)); horizontalRowView.getGridView().setOnItemListener(new OnItemListener() &#123; @Override public void onItemSelected(Object parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.05f) .scaleY(1.05f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundResource(R.drawable.bg_item); &#125; @Override public void onItemPreSelected(Object parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.0f) .scaleY(1.0f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundColor(getResources().getColor(android.R.color.transparent)); &#125; &#125;); listItemAdapter.setNewData(mockData.listItems); &#125;&#125; GNList类是一个普通的对象，里面只放了一个String列表。水平列表adapter使用上面提到的同一个adapter。效果： RecyclerViewTV嵌套，也是先使用垂直列表，再嵌套水平列表。垂直列表布局： 1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@android:color/black&quot; &gt; &lt;com.example.core.view.RecyclerViewTV android:id=&quot;@+id/rvt_item&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;20pt&quot; app:layoutManagerTV=&quot;V7LinearLayoutManager&quot; app:selectedItemIsCenteredTV=&quot;true&quot; /&gt;&lt;/RelativeLayout&gt; 水平列表布局： 1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:clipChildren=&quot;false&quot; android:clipToPadding=&quot;false&quot; &gt; &lt;com.example.core.view.RecyclerViewTV android:id=&quot;@+id/rvt_h_item&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; app:layoutManagerTV=&quot;V7LinearLayoutManager&quot; app:selectedItemIsCenteredTV=&quot;true&quot; /&gt;&lt;/FrameLayout&gt; 代码： 1234567//@BindView(R.id.rvt_item) RecyclerViewTV rvtItem;//private ItemAdapter itemAdapter;itemAdapter = new ItemAdapter();rvtItem.setAdapter(itemAdapter);rvtItem.setSpacingWithMargins(AutoSizeUtils.pt2px(context, 20), AutoSizeUtils.pt2px(context, 0));itemAdapter.setNewData(mockData.rnLists); 垂直列表adapter： 123456789101112131415161718192021222324252627282930313233343536public class ItemAdapter extends BaseQuickAdapter&lt;RNList, BaseViewHolder&gt; &#123; public ItemAdapter() &#123; super(R.layout.layout_rn); &#125; @Override protected void convert(BaseViewHolder helper, RNList item) &#123; RecyclerViewTV rvthItem = helper.getView(R.id.rvt_h_item); ListItemAdapter listItemAdapter = new ListItemAdapter(); rvthItem.setAdapter(listItemAdapter); rvthItem.setSpacingWithMargins(AutoSizeUtils.pt2px(context, 0), AutoSizeUtils.pt2px(context, 20)); rvthItem.setOnItemListener(new RecyclerViewTV.OnItemListener() &#123; @Override public void onItemSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.05f) .scaleY(1.05f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundResource(R.drawable.bg_item); &#125; @Override public void onItemPreSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.0f) .scaleY(1.0f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundColor(getResources().getColor(android.R.color.transparent)); &#125; &#125;); listItemAdapter.setNewData(mockData.listItems); &#125; &#125; RNList类和GNList一样，里面只放了一个String列表。效果和leanback嵌套的效果一样。 同一个列表不相同的item 在一个列表中，item展示的内容可能是不一样的，这里使用RecyclerViewTV演示，leanback使用方法差不多。 列表布局：123456789101112131415161718&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@android:color/black&quot; &gt; &lt;com.example.core.view.RecyclerViewTV android:id=&quot;@+id/rvt_item&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_horizontal&quot; android:padding=&quot;20pt&quot; android:orientation=&quot;vertical&quot; app:layoutManagerTV=&quot;V7GridLayoutManager&quot; app:selectedItemIsCenteredTV=&quot;true&quot; /&gt;&lt;/FrameLayout&gt; item1(150pt x 150pt，中间文字)布局：12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:focusable=&quot;true&quot; android:focusableInTouchMode=&quot;true&quot; android:padding=&quot;2pt&quot; &gt; &lt;FrameLayout android:id=&quot;@+id/fl_content&quot; android:layout_width=&quot;150pt&quot; android:layout_height=&quot;150pt&quot; android:background=&quot;@color/colorPrimary&quot; &gt; &lt;TextView android:id=&quot;@+id/tv_text&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;text&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;25pt&quot; /&gt; &lt;/FrameLayout&gt;&lt;/RelativeLayout&gt; item2(320pt x 150pt，中间图片和文字)布局：123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:focusable=&quot;true&quot; android:focusableInTouchMode=&quot;true&quot; android:padding=&quot;2pt&quot; &gt; &lt;FrameLayout android:id=&quot;@+id/fl_content&quot; android:layout_width=&quot;324pt&quot; android:layout_height=&quot;150pt&quot; android:background=&quot;@color/colorPrimary&quot; &gt; &lt;ImageView android:layout_width=&quot;50pt&quot; android:layout_height=&quot;50pt&quot; android:layout_gravity=&quot;center_vertical&quot; android:layout_marginLeft=&quot;30pt&quot; android:src=&quot;@mipmap/ic_launcher&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_text&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_vertical|right&quot; android:layout_marginRight=&quot;30pt&quot; android:text=&quot;text&quot; android:textColor=&quot;@android:color/holo_green_light&quot; android:textSize=&quot;25pt&quot; /&gt; &lt;/FrameLayout&gt;&lt;/RelativeLayout&gt; item3(150pt x 150pt，中间图片)布局：1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:focusable=&quot;true&quot; android:focusableInTouchMode=&quot;true&quot; android:padding=&quot;2pt&quot; &gt; &lt;FrameLayout android:id=&quot;@+id/fl_content&quot; android:layout_width=&quot;150pt&quot; android:layout_height=&quot;150pt&quot; android:background=&quot;@color/colorPrimary&quot; &gt; &lt;ImageView android:id=&quot;@+id/iv_img&quot; android:layout_width=&quot;50pt&quot; android:layout_height=&quot;50pt&quot; android:layout_gravity=&quot;center&quot; android:src=&quot;@drawable/ic_launcher&quot; /&gt; &lt;/FrameLayout&gt;&lt;/RelativeLayout&gt; 代码：1234567891011121314151617181920212223242526272829303132333435363738//@BindView(R.id.rvt_item) RecyclerViewTV rvtItem;//private ItemAdapter itemAdapter;itemAdapter = new ItemAdapter();itemAdapter.setSpanSizeLookup(new BaseQuickAdapter.SpanSizeLookup() &#123; @Override public int getSpanSize(GridLayoutManager gridLayoutManager, int position) &#123; return RS_TYPE_LONG == mockData.rsModels.get(position).getItemType() ? 2 : 1; &#125;&#125;);rvtItem.setSpacingWithMargins(AutoSizeUtils.pt2px(context, 20), AutoSizeUtils.pt2px(context, 20));rvtItem.setLayoutManager(new V7GridLayoutManager(context, 3));rvtItem.setAdapter(itemAdapter);rvtItem.setOnItemListener(new RecyclerViewTV.OnItemListener() &#123; @Override public void onItemSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.05f) .scaleY(1.05f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundResource(R.drawable.bg_item); &#125; @Override public void onItemPreSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.0f) .scaleY(1.0f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundColor(getResources().getColor(android.R.color.transparent)); &#125;&#125;);itemAdapter.setNewData(mockData.rsModels);itemAdapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() &#123; @Override public void onItemClick(BaseQuickAdapter adapter, View view, int position) &#123; toastor.showToast(&quot;click&quot; + position); &#125;&#125;); 注：RecyclerViewTV的setAdapter方法要放在setLayoutManager方法后面，否则Adapter的setSpanSizeLookup方法不会执行。 效果： 暗焦点暗焦点也是一个经常需要用到的功能，比如下面就是一个左边菜单右边内容的布局，需要暗焦点提示使用者菜单的当前选中项。先放效果图：外框架activity布局：1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@android:color/black&quot; &gt; &lt;com.example.core.view.RecyclerViewTV android:id=&quot;@+id/rvt_menu&quot; android:layout_width=&quot;200pt&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:orientation=&quot;vertical&quot; app:layoutManagerTV=&quot;V7LinearLayoutManager&quot; app:selectedItemIsCenteredTV=&quot;true&quot; /&gt; &lt;com.example.core.view.VerticalViewPager android:id=&quot;@+id/vvp_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_toRightOf=&quot;@id/rvt_menu&quot; /&gt;&lt;/RelativeLayout&gt; fragment布局：123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;com.example.core.view.RecyclerViewTV android:id=&quot;@+id/rvt_item&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:padding=&quot;20pt&quot; app:layoutManagerTV=&quot;V7GridLayoutManager&quot; app:selectedItemIsCenteredTV=&quot;true&quot; /&gt;&lt;/RelativeLayout&gt; 外框架activity主要代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//@BindView(R.id.rvt_menu) RecyclerViewTV rvtMenu;//@BindView(R.id.vvp_content) VerticalViewPager vvpContent;//@BindColor(android.R.color.transparent) int transparent;//@BindColor(R.color.colorPrimary) int darkerGray;//@BindColor(android.R.color.tertiary_text_light) int textLight;//private MenuAdapter menuAdapter;//private boolean isRight = false;//private ViewPagerAdapter pagerAdapter;menuAdapter = new MenuAdapter();rvtMenu.setSpacingWithMargins(AutoSizeUtils.pt2px(context, 20), AutoSizeUtils.pt2px(context, 0));rvtMenu.setAdapter(menuAdapter);rvtMenu.setOnItemListener(new RecyclerViewTV.OnItemListener() &#123; @Override public void onItemSelected(RecyclerViewTV parent, View itemView, int position) &#123; if (position != vvpContent.getCurrentItem()) &#123; vvpContent.setCurrentItem(position); &#125; itemView.setBackgroundColor(darkerGray); &#125; @Override public void onItemPreSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.setBackgroundColor(isRight ? textLight : transparent); &#125;&#125;);rvtMenu.setOnChildViewHolderSelectedListener( new RecyclerViewTV.OnChildViewHolderSelectedListener() &#123; @Override public void onChildViewHolderSelected(RecyclerViewTV parent, RecyclerView.ViewHolder vh, int position) &#123; vh.itemView.setOnKeyListener(new View.OnKeyListener() &#123; @Override public boolean onKey(View view, int i, KeyEvent keyEvent) &#123; if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) &#123; isRight = i == KeyEvent.KEYCODE_DPAD_RIGHT; &#125; return false; &#125; &#125;); &#125; &#125;);menuAdapter.setNewData(mockData.outMenu);for (int i = 0; i &lt; mockData.outMenu.size(); i++) &#123; BaseFragment fragment = new ConentFragment(); Bundle bundle = new Bundle(); bundle.putInt(&quot;menuIndex&quot;, i); fragment.setArguments(bundle); fragments.add(fragment);&#125;pagerAdapter = new ViewPagerAdapter(fragmentManager, fragments);vvpContent.setAdapter(pagerAdapter);setViewPagerSpeed(vvpContent, 300);//设置viewpager切换的速度 MenuAdapter上面例子已经有很多不再重复放了。这里是通过一个布尔值isRight和setOnChildViewHolderSelectedListener方法记录操作状态实现暗焦点的，setOnChildViewHolderSelectedListener是一个列表子项的监听事件。还可以通过View的activated值来记录暗焦点，比如列表选中的最后一项的子视图设置为activated,在子视图监听事件setOnItemListener中通过itemView.isActivated()判断是否为暗焦点。本项目使用的RecyclerViewTV专门针对暗焦点做了处理就是通过activated实现的，通过isMenu(true)打开即可进行暗焦点的设置和判断操作。 外框架activity需要注意的方法：123456789101112131415@Override public void onAttachedToWindow() &#123; super.onAttachedToWindow(); rvtMenu.setSelection(0);&#125;protected void setViewPagerSpeed(VerticalViewPager viewPager, int mDuration) &#123; try &#123; Field field = VerticalViewPager.class.getDeclaredField(&quot;mScroller&quot;); field.setAccessible(true); FixedSpeedScroller scroller = new FixedSpeedScroller(viewPager.getContext(), new AccelerateInterpolator()); field.set(viewPager, scroller); scroller.setmDuration(mDuration); &#125; catch (Exception e) &#123; &#125;&#125; 因为fragment里面的数据可能会后渲染，在刚进入这个界面的时候焦点会在fragment上面，所以需要再onAttachedToWindow方法中让焦点进入界面渲染完成后回到菜单上，这里不用requestFocus()而使用setSelection()是因为setSelection()里面已经包含了requestFocus()方法并且它能选择列表具体哪一个子项获得焦点。 setViewPagerSpeed是一个设置viewpager页面切换速度的方法。 fragment代码：1234567891011121314151617181920212223242526272829303132//@BindView(R.id.rvt_item) RecyclerViewTV rvtItem;//private ListItemAdapter listItemAdapter;Bundle bundle = getArguments(); if (bundle != null) &#123; int menuIndex = bundle.getInt(&quot;menuIndex&quot;);//获取activity传过来的数据 &#125; listItemAdapter = new ListItemAdapter(); rvtItem.setAdapter(listItemAdapter); rvtItem.setSpacingWithMargins(AutoSizeUtils.pt2px(mContext, 20), AutoSizeUtils.pt2px(mContext, 20)); rvtItem.setLayoutManager(new V7GridLayoutManager(mContext, 4)); rvtItem.setOnItemListener(new RecyclerViewTV.OnItemListener() &#123; @Override public void onItemSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.05f) .scaleY(1.05f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundResource(R.drawable.bg_item); &#125; @Override public void onItemPreSelected(RecyclerViewTV parent, View itemView, int position) &#123; itemView.animate() .scaleX(1.0f) .scaleY(1.0f) .setInterpolator(new BounceInterpolator()) .setDuration(300) .start(); itemView.setBackgroundColor(getResources().getColor(android.R.color.transparent)); &#125; &#125;); fragment没什么需要注意的东西，和之前的RecyclerViewTV网格列表一样的代码。 遥控器按键遥控器按键主要有方向键(上、下、左、右)、确定、返回、播放（暂停）、数字等。activity中可以通过onKeyDown和dispatchKeyEvent方法进行监听操作：12345678@Override public boolean onKeyDown(int keyCode, KeyEvent event) &#123; //TODO operating return super.onKeyDown(keyCode, event);&#125;@Override public boolean dispatchKeyEvent(KeyEvent event) &#123; //TODO operating return super.dispatchKeyEvent(event);&#125; 返回事件也可以通过onBackPressed方法监听操作。 view可以通过setOnKeyListener方法进行监听操作：123456view.setOnKeyListener(new View.OnKeyListener() &#123; @Override public boolean onKey(View view, int keyCode, KeyEvent keyEvent) &#123; //TODO operating return false; &#125;&#125;); 按键监听的返回值为true时，则表示不执行按键操作，可自定义操作。 键值 事件 KeyEvent.KEYCODE_DPAD_UP 上 KeyEvent.KEYCODE_DPAD_DOWN 下 KeyEvent.KEYCODE_DPAD_LEFT 左 KeyEvent.KEYCODE_DPAD_RIGHT 右 KeyEvent.KEYCODE_DPAD_CENTER 确定 KeyEvent.KEYCODE_MEDIA_PAUSE 视频播放、暂停 KeyEvent.KEYCODE_1 0~9，10个数字 KeyEvent.KEYCODE_BACK 返回键 KeyEvent.KEYCODE_HOME 主页 KeyEvent.KEYCODE_A A~Z，26个字母 KeyEvent.KEYCODE_MENU 菜单 … … 附：项目地址]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>AndroidTV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxBus的使用]]></title>
    <url>%2F2018%2F12%2F11%2F2018-12-11-RxBus%2F</url>
    <content type="text"><![CDATA[EventBus是一款针对Android优化的发布-订阅事件总线，它简化了应用程序内各组件间、组件与后台线程间的通信，优点是更加简洁、更优雅、开销更小，且将发送者和接收者解耦。而RxBus是使用RxJava实现事件总线的一中思想，比EventBus更方便。简单来说RxBus的作用就是方便组件之间的交互，当然，项目中能避免使用RxBus和EventBus就尽量不用。 配置RxBinding是JakeWharton的一个库，可以响应式的方式处理UI的响应问题，当中已经依赖了RxJava等库，不需要重复依赖。也可以不用RxBingding而直接依赖RxJava的相关库。1compile &apos;com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha1&apos; 使用RxBus类：1234567891011121314151617private Subject&lt;Object&gt; bus = PublishSubject.create().toSerialized();public void post(Object o) &#123; bus.onNext(o);&#125;public &lt;T&gt; Observable&lt;T&gt; toObservable(Class&lt;T&gt; event) &#123; return bus.ofType(event).onErrorReturn(new Function&lt;Throwable, T&gt;() &#123; @Override public T apply(@NonNull Throwable throwable) throws Exception &#123; return null; &#125; &#125;).filter(new Predicate&lt;T&gt;() &#123; @Override public boolean test(@NonNull T t) throws Exception &#123; return t != null; &#125; &#125;).observeOn(AndroidSchedulers.mainThread());&#125; BaseFragment类,统一处理所有订阅：12345678910111213141516171819private CompositeDisposable mCompositeDisposable;//create方法中：mCompositeDisposable = new CompositeDisposable();protected void addDisposable(Disposable mDisposable) &#123; if (mCompositeDisposable == null) &#123; mCompositeDisposable = new CompositeDisposable(); &#125; mCompositeDisposable.add(mDisposable);&#125;private void clearDisposable() &#123; if (mCompositeDisposable != null) &#123; mCompositeDisposable.clear(); &#125;&#125;//destroy方法中：clearDisposable(); 发送者Fragment：12345btnSend.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; RxBus.getInstance().post(new MessageEvent(DateUtil.getCurrentTime(), &quot;商城界面的事件&quot;)); &#125; &#125;); 接收者Fragment123456789//写在初始化方法中，随时准备接收事件addDisposable(RxBus.getInstance() .toObservable(MessageEvent.class) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Consumer&lt;MessageEvent&gt;() &#123; @Override public void accept(MessageEvent messageEvent) throws Exception &#123; tvHomeAccept.setText(messageEvent.getTime() + &quot;\n接收到 &quot; + messageEvent.getMessage()); &#125; &#125;)); 最后 效果 项目地址 完]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>rx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fmod变声方法简单调用]]></title>
    <url>%2F2018%2F12%2F10%2F2018-12-10-Fmod-Voice-Change%2F</url>
    <content type="text"><![CDATA[fmod是一个强大的声音引擎框架，QQ、魔兽世界及其他很多游戏都是使用的这套框架，框架内包含几十种声音类型，还可以修改声音的频率、速度等等。下面来简单调用一下fmod的变声方法。 下载 fmod API进入fmod download下载Android API。 新建项目勾选include c/c++ support。 勾选异常检测和安全转换 加入API打开下载之后解压的fmod API目录，到api/lowlevel文件夹，把inc文件夹及里面的文件全部复制到项目的app/src/main/cpp文件夹中,把lib文件夹中的所有文件夹和文件复制到项目的app/libs文件夹中，jar包要右键add as library。 配置app/build.gradleandroid/defaultConfig里新增：123ndk &#123; abiFilters &quot;armeabi&quot;,&quot;arm64-v8a&quot;,&quot;armeabi-v7a&quot;,&quot;x86&quot;&#125; android里新增：1234sourceSets.main &#123; jniLibs.srcDirs = [&apos;libs&apos;] jni.srcDirs = []&#125; 配置app/CMakeLists.txt123456789101112131415161718192021222324252627282930313233343536373839404142434445464748cmake_minimum_required(VERSION 3.4.1)#-----------------------------------------find_library( log-lib log )set(my_lib_path $&#123;CMAKE_SOURCE_DIR&#125;/libs)# 添加三方的so库add_library(libfmod SHARED IMPORTED ) # 指名第三方库的绝对路径 set_target_properties( libfmod PROPERTIES IMPORTED_LOCATION $&#123;my_lib_path&#125;/$&#123;ANDROID_ABI&#125;/libfmod.so ) add_library(libfmodL SHARED IMPORTED ) set_target_properties( libfmodL PROPERTIES IMPORTED_LOCATION $&#123;my_lib_path&#125;/$&#123;ANDROID_ABI&#125;/libfmodL.so )set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=gnu++11&quot;)#--------------------------------add_library( # Sets the name of the library. changeVoice # Sets the library as a shared library. SHARED # Provides a relative path to your source file(s). src/main/cpp/native-lib.cpp )#---------------------# 导入路径，为了让编译时能够寻找到这个文件夹include_directories(src/main/cpp/inc)# 链接好三个路径target_link_libraries( changeVoice libfmod libfmodL $&#123;log-lib&#125; ) 代码部分布局文件：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#FFF&quot; android:gravity=&quot;center_horizontal&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10pt&quot; &gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; &gt; &lt;Button android:id=&quot;@+id/btn_1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;原声&quot; /&gt; &lt;Button android:id=&quot;@+id/btn_2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;萝莉&quot; /&gt; &lt;Button android:id=&quot;@+id/btn_3&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;大叔&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; &gt; &lt;Button android:id=&quot;@+id/btn_4&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;惊悚&quot; /&gt; &lt;Button android:id=&quot;@+id/btn_5&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;搞怪&quot; /&gt; &lt;Button android:id=&quot;@+id/btn_6&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;空灵&quot; /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; java代码，新建Util类：123456789101112131415161718192021222324public class Util &#123; //音效的类型 public static final int MODE_NORMAL = 0;//正常 public static final int MODE_LUOLI = 1;//萝莉 public static final int MODE_DASHU = 2;//大叔 public static final int MODE_JINGSONG = 3;//惊悚 public static final int MODE_GAOGUAI = 4;//搞怪 public static final int MODE_KONGLING = 5;//空灵 /** * 变声 * * @param path 声音路径 * @param type 变声类型 */ public static native void voiceChange(String path, int type); static &#123; System.loadLibrary(&quot;fmodL&quot;); System.loadLibrary(&quot;fmod&quot;); System.loadLibrary(&quot;changeVoice&quot;); &#125;&#125; java代码，MainActivity类：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); FMOD.init(this); setContentView(R.layout.activity_main); findViewById(R.id.btn_1).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; VoiceFun1(v); &#125; &#125;); findViewById(R.id.btn_2).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; VoiceFun2(v); &#125; &#125;); findViewById(R.id.btn_3).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; VoiceFun3(v); &#125; &#125;); findViewById(R.id.btn_4).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; VoiceFun4(v); &#125; &#125;); findViewById(R.id.btn_5).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; VoiceFun5(v); &#125; &#125;); findViewById(R.id.btn_6).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; VoiceFun6(v); &#125; &#125;); &#125; public void VoiceFun1(View btn) &#123; String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separatorChar + &quot;/Download/10028.wav&quot;; File file = new File(path); if (file.exists()) &#123; Toast.makeText(this, &quot;变声-正常&quot;, Toast.LENGTH_SHORT).show(); Util.voiceChange(path, Util.MODE_NORMAL); Log.e(&quot;x---&quot;, &quot;VoiceFun1&quot;); &#125; else &#123; Log.e(&quot;x---&quot;, &quot;file is not exist&quot;); Toast.makeText(this, &quot;file is not exist&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125; public void VoiceFun2(View btn) &#123; String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separatorChar + &quot;/Download/10028.wav&quot;; File file = new File(path); if (file.exists()) &#123; Toast.makeText(this, &quot;变声-萝莉&quot;, Toast.LENGTH_SHORT).show(); Util.voiceChange(path, Util.MODE_LUOLI); Log.d(&quot;jason&quot;, &quot;VoiceFun2&quot;); &#125; else &#123; Log.e(&quot;x---&quot;, &quot;file is not exist&quot;); Toast.makeText(this, &quot;file is not exist&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125; public void VoiceFun3(View btn) &#123; String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separatorChar + &quot;/Download/10028.wav&quot;; File file = new File(path); if (file.exists()) &#123; Toast.makeText(this, &quot;变声-大叔&quot;, Toast.LENGTH_SHORT).show(); Util.voiceChange(path, Util.MODE_DASHU); Log.e(&quot;x---&quot;, &quot;VoiceFun3&quot;); &#125; else &#123; Log.e(&quot;x---&quot;, &quot;file is not exist&quot;); Toast.makeText(this, &quot;file is not exist&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125; public void VoiceFun4(View btn) &#123; String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separatorChar + &quot;/Download/10028.wav&quot;; File file = new File(path); if (file.exists()) &#123; Toast.makeText(this, &quot;变声-惊悚&quot;, Toast.LENGTH_SHORT).show(); Util.voiceChange(path, Util.MODE_JINGSONG); Log.e(&quot;x---&quot;, &quot;VoiceFun4&quot;); &#125; else &#123; Log.e(&quot;x---&quot;, &quot;file is not exist&quot;); Toast.makeText(this, &quot;file is not exist&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125; public void VoiceFun5(View btn) &#123; String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separatorChar + &quot;/Download/10028.wav&quot;; File file = new File(path); if (file.exists()) &#123; Toast.makeText(this, &quot;变声-搞笑&quot;, Toast.LENGTH_SHORT).show(); Util.voiceChange(path, Util.MODE_GAOGUAI); Log.e(&quot;x---&quot;, &quot;VoiceFun5&quot;); &#125; else &#123; Log.e(&quot;x---&quot;, &quot;file is not exist&quot;); Toast.makeText(this, &quot;file is not exist&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125; public void VoiceFun6(View btn) &#123; String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separatorChar + &quot;/Download/10028.wav&quot;; File file = new File(path); if (file.exists()) &#123; Toast.makeText(this, &quot;变声-空灵&quot;, Toast.LENGTH_SHORT).show(); Util.voiceChange(path, Util.MODE_KONGLING); Log.e(&quot;x---&quot;, &quot;VoiceFun6&quot;); &#125; else &#123; Log.e(&quot;x---&quot;, &quot;file is not exist&quot;); Toast.makeText(this, &quot;file is not exist&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); FMOD.close(); &#125; @Override public void onBackPressed() &#123; super.onBackPressed(); finish(); &#125;&#125; C++代码，app/src/main/cpp/native-lib.cpp:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include &lt;jni.h&gt;#include &quot;inc/fmod.hpp&quot;#include &lt;string&gt;#include &lt;unistd.h&gt;using namespace FMOD;#define MODE_NORMAL 0#define MODE_LUOLI 1#define MODE_DASHU 2#define MODE_JINGSONG 3#define MODE_GAOGUAI 4#define MODE_KONGLING 5#include &lt;android/log.h&gt;#define LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,&quot;voiceChange&quot;,FORMAT,##__VA_ARGS__);#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,&quot;voiceChange&quot;,FORMAT,##__VA_ARGS__);extern &quot;C&quot;JNIEXPORT void JNICALLJava_com_exp_fmodvoicechange_Util_voiceChange(JNIEnv *env, jclass cls, jstring path_str, jint type) &#123; System * system; Sound * sound; Channel *channel; DSP *dsp; bool playing= true; float frequency=1; //初始化 System_Create(&amp;system); system-&gt;init(32, FMOD_INIT_NORMAL, NULL); //将string转成char* const char* path=env-&gt;GetStringUTFChars(path_str,NULL); //创建声音 system-&gt;createSound(path,FMOD_DEFAULT, 0, &amp;sound); try &#123; //根据类型改变声音 switch (type) &#123; case MODE_NORMAL: //正常声音 system-&gt;playSound(sound, 0, false, &amp;channel); break; case MODE_LUOLI: //萝莉 //DSP digital signal process //dsp -&gt; 音效 创建fmod中预定义好的音效 //FMOD_DSP_TYPE_PITCHSHIFT dsp，提升或者降低音调用的一种音效 system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp); //提高音效 dsp-&gt;setParameterFloat(FMOD_DSP_TYPE_PITCHSHIFT, 2.5); //播放声音 system-&gt;playSound(sound, 0, false, &amp;channel); //将channel添加到dsp channel-&gt;addDSP(0, dsp); break; case MODE_DASHU: //大叔 system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp); //降低声音 dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH, 0.8); //播放声音 system-&gt;playSound(sound, 0, false, &amp;channel); //将channel添加到dsp channel-&gt;addDSP(0, dsp); break; case MODE_JINGSONG: //惊悚 system-&gt;createDSPByType(FMOD_DSP_TYPE_TREMOLO, &amp;dsp); dsp-&gt;setParameterFloat(FMOD_DSP_TREMOLO_SKEW, 0.5); system-&gt;playSound(sound, 0, false, &amp;channel); channel-&gt;addDSP(0, dsp); break; case MODE_GAOGUAI: //搞怪 //提高说话的速度 system-&gt;playSound(sound, 0, false, &amp;channel); //frequency 原来的声音速度 channel-&gt;getFrequency(&amp;frequency); frequency = frequency * 1.6; channel-&gt;setFrequency(frequency); break; case MODE_KONGLING: //空灵 system-&gt;createDSPByType(FMOD_DSP_TYPE_ECHO, &amp;dsp); dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_DELAY, 300); dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_FEEDBACK, 20); system-&gt;playSound(sound, 0, false, &amp;channel); channel-&gt;addDSP(0, dsp); break; default: break; &#125; &#125; catch (...)&#123; //捕捉异常 LOGE(&quot;%s&quot;,&quot;发生异常&quot;); &#125; system-&gt;update(); //释放资源 //单位是微秒 //每秒钟判断下是否在播放 while(playing)&#123; channel-&gt;isPlaying(&amp;playing); usleep(1000 * 1000); &#125; //释放 sound-&gt;release(); system-&gt;close(); system-&gt;release(); env-&gt;ReleaseStringUTFChars(path_str,path);&#125; 最后 界面： 项目配置： Android Studio 2.3.3 gradle 2.3.3 sdk version 26 fmod API version 1.10.10 ndk version 14 权限： 1234567&lt;!-- xmlns:tools=&quot;http://schemas.android.com/tools&quot; --&gt;&lt;!--读写sd卡权限--&gt;&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; tools:ignore=&quot;ProtectedPermissions&quot; /&gt; 项目地址]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>audio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客-Jekyll迁移到Hexo]]></title>
    <url>%2F2018%2F12%2F04%2F2018-12-04-Jekyll-To-Hexo%2F</url>
    <content type="text"><![CDATA[发现了比Jekyll用起来更舒服的Hexo，它是一个快速、简洁且高效的博客框架，其中使用Markdown（或其他渲染引擎）解析文章，最后生成静态网页。研究了一下Hexo的文档过后马上就把它应用到了博客中。 详细流程(Windows环境)如下，具体可参考Hexo文档。 环境准备 安装Git、安装Node.js Git Node.js 安装Hexo 1$ npm install -g hexo-cli 建站123$ hexo init blackchy.github.io$ cd blackchy.github.io$ npm install 配置打开根目录下的_config.yml文件，主要配置以下内容。12345678# Sitetitle: Black Chy&apos;s Blogsubtitle: 香蕉是最受欢迎的水果。description: Just a dog.keywords: Android, Developer, Dogauthor: Black Chylanguage: zh-CNtimezone: Asia/Chongqing 主题项目默认是landscape主题，这里修改为hexo-theme-next。首先下载next主题到项目中。1$ git clone https://github.com/theme-next/hexo-theme-next themes/next 然后把根目录下_config.yml文件中的theme改为next。next主题需要手动生成tags和categories，并修改index文件中的内容:12$ hexo new page tags$ hexo new page categories 12345---title: 所有标签type: tagsdate: 2018-12-04 00:00:00--- 12345---title: 所有分类type: categoriesdate: 2018-12-04 00:00:00--- 最后，在下载好的next主题中也有一个_config.yml文件（路径：theme-&gt;next-&gt;_config.yml），打开进行next主题相关配置。例如： next内部又有4个不同的设计风格，这里使用的是Gemini 1scheme: Gemini 设置头像 123456789avatar: #头像url url: /uploads/avatar.png #圆头像 rounded: true #透明度 0-1 opacity: 1 #旋转动画 rotated: true 设置菜单列表，仅打开 首页、关于、归档，其他全部关闭。 123456789menu: home: / || home about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 打开不蒜子网页计数器 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 安装其他js 1234567891011fastclick: true$ cd themes/next$ git clone https://github.com/theme-next/theme-next-fastclick source/lib/fastclicklazyload: true$ cd themes/next$ git clone https://github.com/theme-next/theme-next-jquery-lazyload source/lib/jquery_lazyloadpace: true$ cd themes/next$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace 等等…… 添加搜索功能 安装插件 12npm install hexo-generator-searchnpm install hexo-generator-searchdb 修改hexo配置根目录下_config.yml中增加如下配置: 12345search: path: search.xml field: post format: html limit: 10000 配置next中的搜索入口打开themes/next/_config.yml，修改配置: 1234local_search: enable: true trigger: auto top_n_per_article: 1 参考链接：为hexo和next增加站内搜索功能 迁移把Jekyll目录下的_posts中文章全部复制到Hexo目录下的source/_posts中，并把文章名统一为:year-:month-:day-:title.md，需要注意的是_开头的文章不会显示，最后修改文章参数： 123456---title: blog titledate: YYYY-MM-DD HH:mm:ss categories: misctags: [tag1, tag2]--- 文章太长则需要手动添加&lt;!-- more --&gt;以显示阅读全文。 部署 (Git)部署前可以先本地运行试看效果，在根目录运行服务器命令：1$hexo server 简写 hexo s 然后打开浏览器访问查看博客（默认：http://localhost:4000 ） 本地试运行的博客没有问题后就可以去部署到Github上了。 本地配置deploy,打开根目录_config.yml。 12345deploy: - type: git repo: git@github.com:blackchy/blackchy.github.io.git branch: [master] message: a commit message 安装hexo-deployer-git 1$ npm install hexo-deployer-git --save 执行部署 1$ hexo g -d 注意事项 由于Jekyll上传github服务器会自动生成并部署，而Hexo需要本地生成静态文件再上传，所以需要另起一个分支存放hexo源码。 通过git克隆下来的theme、js，删除对应的.git文件夹。 至此，迁移完毕。]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[String 相关]]></title>
    <url>%2F2018%2F11%2F30%2F2018-11-30-String-About%2F</url>
    <content type="text"><![CDATA[Android中String相关的操作，把它们记录下来。 修改部分字体大小原字体：字体大小改变 &nbsp;&nbsp;修改后：字体大小改 变12345CharSequence charSequence1 = &quot;字体改变大小&quot;;SpannableString spannableString = new SpannableString(charSequence1); spannableString.setSpan(new RelativeSizeSpan(0.5f), charSequence1.length() - 1, charSequence1.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);tvTitle.setText(spannableString); 修改部分字体颜色原字体：字体改变颜色 &nbsp;&nbsp;修改后：字体改变颜 色1234567CharSequence charSequence = &quot;字体改变颜色&quot;;SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(charSequence);spannableStringBuilder.setSpan( new ForegroundColorSpan(getResources().getColor(R.color.gl_vip_up)), spannableStringBuilder.length() - 1, spannableStringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);tvTitle.setText(spannableStringBuilder); 注：待补充]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git:操作和问题的收集]]></title>
    <url>%2F2018%2F09%2F17%2F2018-09-17-Git-Operations-Problem%2F</url>
    <content type="text"><![CDATA[Git是一个很好的工具，偶尔想用某个命令的时候却突然忘记了:(，网上再去查找又有点浪费时间，所以收集了一些常用的命令，顺带一些其他相关的东西。 Git安装Git安装、配置等教程省略，网上搜索。 GitHubGithub上创建空项目会提示如何初步使用 Git操作收集 git变基 在需要变基的分支上： #git rebase &lt;other branch&gt; 如果有冲突，解决冲突后 #git rebase --continue git合并commit并强推 查看有几笔提交 #git log 编辑commit（n为commit数量） #git rebase -i HEAD~n 强推到远程 #git push -f origin chy/add-market 终止rebase #git rebase --abort git合并分支到new主分支 #git rebase -i new-master git合并其他分支到当前分支 #git merge &lt;other branch&gt; 如果没有冲突，直接就完成了 如果有冲突，则解决冲突，然后执行： #git add . #git commit git回到之前的节点 (首先#git log查看节点) 回到节点06b3680，并保留更改 #git reset --soft 06b3680 回到节点06b3680，并丢弃修改 #git reset --hard 06b3680 git获取远程分支 #git fetch #git checkout -b local-branchname origin/remote_branchname git强制覆盖本地文件 #git fetch --all #git reset --hard origin/master #git pull git强制跳转到某个版本 查看所有的commit git log -g 强制跳转到某个commit版本 git reset --hard d87da1f81de631fbe68c60c1e192aebce5a3cc72 git提交、拉取、推送 提交全部 #git add -A #git commit -m &quot;Your mark!&quot; 拉取同步远程仓库master分支 #git pull origin master 推送到远程仓库master分支 #git push origin master git修改远程仓库地址 #git remote set-url origin http://xxxxx.git git暂存文件 将文件放入暂存区 #git stash 弹出暂存区的文件 #git stash pop 丢弃暂存区的文件 #git stash drop Git问题收集 error: RPC failed; result=22, HTTP code = 411 fatal: The remote end hung up unexpectedly fatal: The remote end hung up unexpectedly 这个是因为http buffer不够造成的，可以简单配置git来解决： git config http.postBuffer 67108864 2.想要把已经push的文件（夹）加入到.ignore中 直接添加到.ignore中是不能成功的，因为已经push到服务器了，需要先删除本地缓存的文件： git rm -r –cached .idea 然后再将其添加到.ignore中，最后git push就ok了 有些文件无法删除，比如sh.exe.stackdump，亦可用此法。 修正： 处理sh.exe.stackdump文件方法： 关闭SourceTree AndroidStudio中删除sh.exe.stackdump文件 再进行git相关操作，不会因为sh.exe.stackdump文件而出现问题 fatal: Unable to create &#39;/.git/index.lock&#39;: File exists. 解决办法： $rm -f ./.git/index.lock In your repository directory. Pro Git(中文版) 链接Pro Git(中文版)]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub Pages与阿里云域名的绑定]]></title>
    <url>%2F2018%2F09%2F15%2F2018-09-15-GitHubPages-Binding-Aliyun%2F</url>
    <content type="text"><![CDATA[搭建好自己的个人博客过后，会发现博客的访问地址是github.io后缀，于是我在阿里云买了一个域名，并把这个域名指向了我的博客服务器地址。 获取github pages的ip地址 配置阿里云域名解析 配置github pages的custom domain进入github pages项目的设置，将解析的域名地址添加到custom domain中并保存。 验证blog : blackchy’s blog]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github个人博客创建流程]]></title>
    <url>%2F2018%2F09%2F15%2F2018-09-15-Github-Person-Blog-Create%2F</url>
    <content type="text"><![CDATA[有些有价值的东西我想把它记录下来，所以拥有自己的博客方便记录它们是一件非常令人高兴的事。Github Pages提供了自己搭建服务器的渠道，由Github提供的博客服务器是免费且不限空间的。以下是我在网上慢慢查找的搭建博客的简略流程。 注册登录github帐号。Github 具体注册登录等流程网上搜索，这里不作阐述。 创建博客项目 在github新建一个repository,这里的Repository name输入自己github账号的username，比如blackchy，之后会成功创建一个项目xxx.github.io，然后https://xxx.github.io就是个人博客的网址。 在xxx.github.io项目点进Settings，找到GitHub Pages模块，Theme Chooser可以选择一个博客的主题，不过一般都是在jekyll或其他地方寻找合适的主题，下面会简单介绍jekyll。Custom domain可以修改博客地址，如果有自己的个人域名可以修改成自己的域名网址，而不用https://xxx.github.io作为博客地址。 设计自己的博客网站可以自己写一个html网站作为博客网站，但是那样对非专业人士、懒人等来说不太友好，所以推荐使用别人写好的模板直接下载下来使用，选择的时候尽量选可塑性较强的模板，以便后面进行修改。jekyll模板地址如下： http://jekyllthemes.org/ 下载安装桌面github以便对项目进行管理，地址如下： Windows：https://windows.github.com/ Mac：https://mac.github.com/ 把github上的xxx.github.io项目克隆到本地，然后下载选择好的模板。删除掉本地项目的所有文件和文件夹(.git文件夹除外)，然后把模板的所有文件和文件夹复制到本地项目中，然后commit并推到github远程仓库，大概几秒到1分钟内，刷新https://xxx.github.io网页就能看到已经复制过来的网站了。 最后，修改一下模板里面的信息再更新，这就是一个完全属于自己的个人博客了。 注：一般博客都是放在posts这个文件夹，用markdown写的，弄好自己的博客网站之后就可以开心地更新博客了。]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
</search>
